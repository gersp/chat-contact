// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * LiveChat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccountData
 */
export interface AccountData {
    /**
     * 
     * @type {number}
     * @memberof AccountData
     */
    accountId?: number;
    /**
     * 
     * @type {string}
     * @memberof AccountData
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountData
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountData
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountData
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountData
     */
    creationDate?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AccountData
     */
    active?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AccountData
     */
    confirmed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountData
     */
    lastAccessDate?: string;
}
/**
 * 
 * @export
 * @interface AccountRegisterData
 */
export interface AccountRegisterData {
    /**
     * 
     * @type {string}
     * @memberof AccountRegisterData
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountRegisterData
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountRegisterData
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountRegisterData
     */
    password?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AccountRegisterData
     */
    forTest?: boolean;
}
/**
 * 
 * @export
 * @interface ActiveChannelData
 */
export interface ActiveChannelData {
    /**
     * 
     * @type {string}
     * @memberof ActiveChannelData
     */
    botUserName?: string;
    /**
     * 
     * @type {string}
     * @memberof ActiveChannelData
     */
    operatorUserName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ActiveChannelData
     */
    hasClient?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ActiveChannelData
     */
    clientDisplayName?: string;
}
/**
 * 
 * @export
 * @interface CloseMessageData
 */
export interface CloseMessageData {
    /**
     * 
     * @type {string}
     * @memberof CloseMessageData
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof CloseMessageData
     */
    text?: string;
}
/**
 * 
 * @export
 * @interface DestinationData
 */
export interface DestinationData {
    /**
     * 
     * @type {string}
     * @memberof DestinationData
     */
    destinationId?: string;
    /**
     * 
     * @type {string}
     * @memberof DestinationData
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof DestinationData
     */
    hasOnline?: boolean;
}
/**
 * 
 * @export
 * @interface DestinationsData
 */
export interface DestinationsData {
    /**
     * 
     * @type {Array<DestinationData>}
     * @memberof DestinationsData
     */
    destinations?: Array<DestinationData>;
}
/**
 * 
 * @export
 * @interface FileMessageData
 */
export interface FileMessageData {
    /**
     * 
     * @type {string}
     * @memberof FileMessageData
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof FileMessageData
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof FileMessageData
     */
    fileName?: string;
    /**
     * 
     * @type {number}
     * @memberof FileMessageData
     */
    size?: number;
}
/**
 * 
 * @export
 * @interface LoginRequestData
 */
export interface LoginRequestData {
    /**
     * 
     * @type {string}
     * @memberof LoginRequestData
     */
    login?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequestData
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface OperatorApiData
 */
export interface OperatorApiData {
    /**
     * 
     * @type {string}
     * @memberof OperatorApiData
     */
    token?: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorApiData
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface SelectedDestinationData
 */
export interface SelectedDestinationData {
    /**
     * 
     * @type {string}
     * @memberof SelectedDestinationData
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof SelectedDestinationData
     */
    destinationId?: string;
    /**
     * 
     * @type {string}
     * @memberof SelectedDestinationData
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof SelectedDestinationData
     */
    attributes?: string;
    /**
     * 
     * @type {string}
     * @memberof SelectedDestinationData
     */
    hiddenAttributes?: string;
    /**
     * 
     * @type {object}
     * @memberof SelectedDestinationData
     */
    customData?: object;
}
/**
 * 
 * @export
 * @interface SessionInfoData
 */
export interface SessionInfoData {
    /**
     * 
     * @type {string}
     * @memberof SessionInfoData
     */
    sessionId?: string;
    /**
     * 
     * @type {number}
     * @memberof SessionInfoData
     */
    accountId?: number;
    /**
     * 
     * @type {string}
     * @memberof SessionInfoData
     */
    displayName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SessionInfoData
     */
    superAdmin?: boolean;
}
/**
 * 
 * @export
 * @interface TextMessageData
 */
export interface TextMessageData {
    /**
     * 
     * @type {string}
     * @memberof TextMessageData
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof TextMessageData
     */
    text?: string;
}
/**
 * 
 * @export
 * @interface WebhookData
 */
export interface WebhookData {
    /**
     * 
     * @type {string}
     * @memberof WebhookData
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface WebhookEmployeeData
 */
export interface WebhookEmployeeData {
    /**
     * 
     * @type {string}
     * @memberof WebhookEmployeeData
     */
    employeeId?: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookEmployeeData
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookEmployeeData
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookEmployeeData
     */
    avatarUrl?: string;
}
/**
 * 
 * @export
 * @interface WebhookMessageData
 */
export interface WebhookMessageData {
    /**
     * 
     * @type {string}
     * @memberof WebhookMessageData
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookMessageData
     */
    userId?: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookMessageData
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof WebhookMessageData
     */
    text?: string;
    /**
     * 
     * @type {WebhookEmployeeData}
     * @memberof WebhookMessageData
     */
    employee?: WebhookEmployeeData;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum WebhookMessageType {
    TextMessage = 'TextMessage',
    FileMessage = 'FileMessage',
    Closed = 'Closed',
    SelectDestination = 'SelectDestination'
}


/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Find account
         * @param {string} email Email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAccount(email: string, options: any = {}): RequestArgs {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling findAccount.');
            }
            const localVarPath = `/api/account`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get account data
         * @param {number} accountId Account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(accountId: number, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling getAccount.');
            }
            const localVarPath = `/api/account/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register account
         * @param {AccountRegisterData} accountRegisterData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAccount(accountRegisterData: AccountRegisterData, options: any = {}): RequestArgs {
            // verify required parameter 'accountRegisterData' is not null or undefined
            if (accountRegisterData === null || accountRegisterData === undefined) {
                throw new RequiredError('accountRegisterData','Required parameter accountRegisterData was null or undefined when calling registerAccount.');
            }
            const localVarPath = `/api/register-account`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"AccountRegisterData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(accountRegisterData !== undefined ? accountRegisterData : {}) : (accountRegisterData || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Find account
         * @param {string} email Email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAccount(email: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountData> {
            const localVarAxiosArgs = AccountApiAxiosParamCreator(configuration).findAccount(email, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get account data
         * @param {number} accountId Account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(accountId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountData> {
            const localVarAxiosArgs = AccountApiAxiosParamCreator(configuration).getAccount(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Register account
         * @param {AccountRegisterData} accountRegisterData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAccount(accountRegisterData: AccountRegisterData, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountData> {
            const localVarAxiosArgs = AccountApiAxiosParamCreator(configuration).registerAccount(accountRegisterData, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Find account
         * @param {string} email Email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAccount(email: string, options?: any) {
            return AccountApiFp(configuration).findAccount(email, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get account data
         * @param {number} accountId Account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(accountId: number, options?: any) {
            return AccountApiFp(configuration).getAccount(accountId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Register account
         * @param {AccountRegisterData} accountRegisterData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerAccount(accountRegisterData: AccountRegisterData, options?: any) {
            return AccountApiFp(configuration).registerAccount(accountRegisterData, options)(axios, basePath);
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @summary Find account
     * @param {string} email Email.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public findAccount(email: string, options?: any) {
        return AccountApiFp(this.configuration).findAccount(email, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get account data
     * @param {number} accountId Account identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public getAccount(accountId: number, options?: any) {
        return AccountApiFp(this.configuration).getAccount(accountId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Register account
     * @param {AccountRegisterData} accountRegisterData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public registerAccount(accountRegisterData: AccountRegisterData, options?: any) {
        return AccountApiFp(this.configuration).registerAccount(accountRegisterData, options)(this.axios, this.basePath);
    }

}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login
         * @param {LoginRequestData} loginRequestData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequestData: LoginRequestData, options: any = {}): RequestArgs {
            // verify required parameter 'loginRequestData' is not null or undefined
            if (loginRequestData === null || loginRequestData === undefined) {
                throw new RequiredError('loginRequestData','Required parameter loginRequestData was null or undefined when calling login.');
            }
            const localVarPath = `/api/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"LoginRequestData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginRequestData !== undefined ? loginRequestData : {}) : (loginRequestData || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options: any = {}): RequestArgs {
            const localVarPath = `/api/logout`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login
         * @param {LoginRequestData} loginRequestData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequestData: LoginRequestData, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionInfoData> {
            const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).login(loginRequestData, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = AuthApiAxiosParamCreator(configuration).logout(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Login
         * @param {LoginRequestData} loginRequestData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequestData: LoginRequestData, options?: any) {
            return AuthApiFp(configuration).login(loginRequestData, options)(axios, basePath);
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any) {
            return AuthApiFp(configuration).logout(options)(axios, basePath);
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Login
     * @param {LoginRequestData} loginRequestData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public login(loginRequestData: LoginRequestData, options?: any) {
        return AuthApiFp(this.configuration).login(loginRequestData, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public logout(options?: any) {
        return AuthApiFp(this.configuration).logout(options)(this.axios, this.basePath);
    }

}


/**
 * ChannelsApi - axios parameter creator
 * @export
 */
export const ChannelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generate PIN
         * @param {number} accountId Account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePin(accountId: number, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling generatePin.');
            }
            const localVarPath = `/api/account/{accountId}/generate-pin`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get active channels data
         * @param {number} accountId Account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveChannels(accountId: number, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling getActiveChannels.');
            }
            const localVarPath = `/api/account/{accountId}/active-channels`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get channels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels(options: any = {}): RequestArgs {
            const localVarPath = `/api/channels`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelsApi - functional programming interface
 * @export
 */
export const ChannelsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generate PIN
         * @param {number} accountId Account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePin(accountId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = ChannelsApiAxiosParamCreator(configuration).generatePin(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get active channels data
         * @param {number} accountId Account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveChannels(accountId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActiveChannelData>> {
            const localVarAxiosArgs = ChannelsApiAxiosParamCreator(configuration).getActiveChannels(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get channels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = ChannelsApiAxiosParamCreator(configuration).getChannels(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ChannelsApi - factory interface
 * @export
 */
export const ChannelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Generate PIN
         * @param {number} accountId Account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePin(accountId: number, options?: any) {
            return ChannelsApiFp(configuration).generatePin(accountId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get active channels data
         * @param {number} accountId Account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveChannels(accountId: number, options?: any) {
            return ChannelsApiFp(configuration).getActiveChannels(accountId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get channels
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannels(options?: any) {
            return ChannelsApiFp(configuration).getChannels(options)(axios, basePath);
        },
    };
};

/**
 * ChannelsApi - object-oriented interface
 * @export
 * @class ChannelsApi
 * @extends {BaseAPI}
 */
export class ChannelsApi extends BaseAPI {
    /**
     * 
     * @summary Generate PIN
     * @param {number} accountId Account identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    public generatePin(accountId: number, options?: any) {
        return ChannelsApiFp(this.configuration).generatePin(accountId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get active channels data
     * @param {number} accountId Account identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    public getActiveChannels(accountId: number, options?: any) {
        return ChannelsApiFp(this.configuration).getActiveChannels(accountId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get channels
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelsApi
     */
    public getChannels(options?: any) {
        return ChannelsApiFp(this.configuration).getChannels(options)(this.axios, this.basePath);
    }

}


/**
 * OperatorApi - axios parameter creator
 * @export
 */
export const OperatorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} token account tocken, to send Operator API requests.
         * @param {CloseMessageData} closeMessageData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeChat(token: string, closeMessageData: CloseMessageData, options: any = {}): RequestArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling closeChat.');
            }
            // verify required parameter 'closeMessageData' is not null or undefined
            if (closeMessageData === null || closeMessageData === undefined) {
                throw new RequiredError('closeMessageData','Required parameter closeMessageData was null or undefined when calling closeChat.');
            }
            const localVarPath = `/api/operator/{token}/closeChat`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"CloseMessageData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(closeMessageData !== undefined ? closeMessageData : {}) : (closeMessageData || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate API token
         * @param {number} accountId Account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateNewApiToken(accountId: number, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling generateNewApiToken.');
            }
            const localVarPath = `/api/account/{accountId}/generate-operator-api-token`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get API token
         * @param {number} accountId Account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiToken(accountId: number, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling getApiToken.');
            }
            const localVarPath = `/api/account/{accountId}/operator-api-token`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} token account tocken, to send Operator API requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDestinations(token: string, options: any = {}): RequestArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling getDestinations.');
            }
            const localVarPath = `/api/operator/{token}/getDestinations`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} token account tocken, to send Operator API requests.
         * @param {SelectedDestinationData} selectedDestinationData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectDestination(token: string, selectedDestinationData: SelectedDestinationData, options: any = {}): RequestArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling selectDestination.');
            }
            // verify required parameter 'selectedDestinationData' is not null or undefined
            if (selectedDestinationData === null || selectedDestinationData === undefined) {
                throw new RequiredError('selectedDestinationData','Required parameter selectedDestinationData was null or undefined when calling selectDestination.');
            }
            const localVarPath = `/api/operator/{token}/selectDestination`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"SelectedDestinationData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(selectedDestinationData !== undefined ? selectedDestinationData : {}) : (selectedDestinationData || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} token account tocken, to send Operator API requests.
         * @param {FileMessageData} fileMessageData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendFile(token: string, fileMessageData: FileMessageData, options: any = {}): RequestArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling sendFile.');
            }
            // verify required parameter 'fileMessageData' is not null or undefined
            if (fileMessageData === null || fileMessageData === undefined) {
                throw new RequiredError('fileMessageData','Required parameter fileMessageData was null or undefined when calling sendFile.');
            }
            const localVarPath = `/api/operator/{token}/sendFile`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"FileMessageData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(fileMessageData !== undefined ? fileMessageData : {}) : (fileMessageData || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} token account tocken, to send Operator API requests.
         * @param {TextMessageData} textMessageData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendText(token: string, textMessageData: TextMessageData, options: any = {}): RequestArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling sendText.');
            }
            // verify required parameter 'textMessageData' is not null or undefined
            if (textMessageData === null || textMessageData === undefined) {
                throw new RequiredError('textMessageData','Required parameter textMessageData was null or undefined when calling sendText.');
            }
            const localVarPath = `/api/operator/{token}/sendText`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"TextMessageData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(textMessageData !== undefined ? textMessageData : {}) : (textMessageData || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} token account tocken, to send Operator API requests.
         * @param {WebhookData} webhookData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWebhook(token: string, webhookData: WebhookData, options: any = {}): RequestArgs {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling setWebhook.');
            }
            // verify required parameter 'webhookData' is not null or undefined
            if (webhookData === null || webhookData === undefined) {
                throw new RequiredError('webhookData','Required parameter webhookData was null or undefined when calling setWebhook.');
            }
            const localVarPath = `/api/operator/{token}/setWebhook`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"WebhookData" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(webhookData !== undefined ? webhookData : {}) : (webhookData || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OperatorApi - functional programming interface
 * @export
 */
export const OperatorApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} token account tocken, to send Operator API requests.
         * @param {CloseMessageData} closeMessageData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeChat(token: string, closeMessageData: CloseMessageData, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OperatorApiAxiosParamCreator(configuration).closeChat(token, closeMessageData, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Generate API token
         * @param {number} accountId Account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateNewApiToken(accountId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperatorApiData> {
            const localVarAxiosArgs = OperatorApiAxiosParamCreator(configuration).generateNewApiToken(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get API token
         * @param {number} accountId Account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiToken(accountId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperatorApiData> {
            const localVarAxiosArgs = OperatorApiAxiosParamCreator(configuration).getApiToken(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} token account tocken, to send Operator API requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDestinations(token: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DestinationsData> {
            const localVarAxiosArgs = OperatorApiAxiosParamCreator(configuration).getDestinations(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} token account tocken, to send Operator API requests.
         * @param {SelectedDestinationData} selectedDestinationData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectDestination(token: string, selectedDestinationData: SelectedDestinationData, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OperatorApiAxiosParamCreator(configuration).selectDestination(token, selectedDestinationData, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} token account tocken, to send Operator API requests.
         * @param {FileMessageData} fileMessageData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendFile(token: string, fileMessageData: FileMessageData, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OperatorApiAxiosParamCreator(configuration).sendFile(token, fileMessageData, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} token account tocken, to send Operator API requests.
         * @param {TextMessageData} textMessageData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendText(token: string, textMessageData: TextMessageData, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OperatorApiAxiosParamCreator(configuration).sendText(token, textMessageData, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} token account tocken, to send Operator API requests.
         * @param {WebhookData} webhookData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWebhook(token: string, webhookData: WebhookData, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OperatorApiAxiosParamCreator(configuration).setWebhook(token, webhookData, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OperatorApi - factory interface
 * @export
 */
export const OperatorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} token account tocken, to send Operator API requests.
         * @param {CloseMessageData} closeMessageData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeChat(token: string, closeMessageData: CloseMessageData, options?: any) {
            return OperatorApiFp(configuration).closeChat(token, closeMessageData, options)(axios, basePath);
        },
        /**
         * 
         * @summary Generate API token
         * @param {number} accountId Account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateNewApiToken(accountId: number, options?: any) {
            return OperatorApiFp(configuration).generateNewApiToken(accountId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Get API token
         * @param {number} accountId Account identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiToken(accountId: number, options?: any) {
            return OperatorApiFp(configuration).getApiToken(accountId, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} token account tocken, to send Operator API requests.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDestinations(token: string, options?: any) {
            return OperatorApiFp(configuration).getDestinations(token, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} token account tocken, to send Operator API requests.
         * @param {SelectedDestinationData} selectedDestinationData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        selectDestination(token: string, selectedDestinationData: SelectedDestinationData, options?: any) {
            return OperatorApiFp(configuration).selectDestination(token, selectedDestinationData, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} token account tocken, to send Operator API requests.
         * @param {FileMessageData} fileMessageData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendFile(token: string, fileMessageData: FileMessageData, options?: any) {
            return OperatorApiFp(configuration).sendFile(token, fileMessageData, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} token account tocken, to send Operator API requests.
         * @param {TextMessageData} textMessageData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendText(token: string, textMessageData: TextMessageData, options?: any) {
            return OperatorApiFp(configuration).sendText(token, textMessageData, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} token account tocken, to send Operator API requests.
         * @param {WebhookData} webhookData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWebhook(token: string, webhookData: WebhookData, options?: any) {
            return OperatorApiFp(configuration).setWebhook(token, webhookData, options)(axios, basePath);
        },
    };
};

/**
 * OperatorApi - object-oriented interface
 * @export
 * @class OperatorApi
 * @extends {BaseAPI}
 */
export class OperatorApi extends BaseAPI {
    /**
     * 
     * @param {string} token account tocken, to send Operator API requests.
     * @param {CloseMessageData} closeMessageData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    public closeChat(token: string, closeMessageData: CloseMessageData, options?: any) {
        return OperatorApiFp(this.configuration).closeChat(token, closeMessageData, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Generate API token
     * @param {number} accountId Account identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    public generateNewApiToken(accountId: number, options?: any) {
        return OperatorApiFp(this.configuration).generateNewApiToken(accountId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Get API token
     * @param {number} accountId Account identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    public getApiToken(accountId: number, options?: any) {
        return OperatorApiFp(this.configuration).getApiToken(accountId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} token account tocken, to send Operator API requests.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    public getDestinations(token: string, options?: any) {
        return OperatorApiFp(this.configuration).getDestinations(token, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} token account tocken, to send Operator API requests.
     * @param {SelectedDestinationData} selectedDestinationData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    public selectDestination(token: string, selectedDestinationData: SelectedDestinationData, options?: any) {
        return OperatorApiFp(this.configuration).selectDestination(token, selectedDestinationData, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} token account tocken, to send Operator API requests.
     * @param {FileMessageData} fileMessageData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    public sendFile(token: string, fileMessageData: FileMessageData, options?: any) {
        return OperatorApiFp(this.configuration).sendFile(token, fileMessageData, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} token account tocken, to send Operator API requests.
     * @param {TextMessageData} textMessageData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    public sendText(token: string, textMessageData: TextMessageData, options?: any) {
        return OperatorApiFp(this.configuration).sendText(token, textMessageData, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} token account tocken, to send Operator API requests.
     * @param {WebhookData} webhookData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApi
     */
    public setWebhook(token: string, webhookData: WebhookData, options?: any) {
        return OperatorApiFp(this.configuration).setWebhook(token, webhookData, options)(this.axios, this.basePath);
    }

}


